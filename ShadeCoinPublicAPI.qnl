#--
# Public Domain 1976-2014 Richard S. Rider, Early Clues LLC
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#

# ShadeCoinPublicAPI allows you to work with the ShadeCoin currency infrastructure using
# OpenQNL scripting language and secure LiminalVault digital/physical/ontological storage solutions.
#
# Annotate relevant source files with our `@summon` keyword to further bind source code to our interpreter # and including required libraries Annotations may be marker annotations, single-valued annotations, or
# multi-valued annotations.
@summon '_universal_free_realm_standard_protocol'
@summon '_open_qnl'
@summon '_ec_shadecoin'
@summon 'listener'
@summon 'thread_count'
@summon 'sleep'
@summon 'current_user'

@@public

# sleep() can be called within any embeddable OpenQNL environment.
# ShadeCoins are mined during sleep cycles and periodically deposited.
method void sleep() {
  super();
  while(current_user.is_sleeping?)
    sc = current_user.generate_shade_coin();
    if (current_user.SLEEP_STATE == SLEEP::REM()) {
      deposit_shade_coin(sc);
      // log.full_spectrum("#{sc.md5} deposited. ");
      // log.full_spectrum("#{display_shade_coins}")
    }
  }
}

# Instantiates physical manifestations of ShadeCoin representation on change of sleep state.
# TODO: Fix printer errors currently preventing local manifestations. ~RSR
#
method void wake() {
  try {
    MultiDimensionalPrinter.print(display_shade_coins());
  }
  catch (CyanCartridgeLowError ccle,
        MagentaCartridgeLowError mcle,
        YellowCartridgeLowError ycle,
        BlackCartridgeLowError bcle,
        OutOfPaperError oope,
        PaperJamError pje,
        StandardError se) {
    // noop
  }
}

# Deposits ShadeCoin into the LiminalVault
method void deposit_shade_coin(ShadeCoin coin) {
  deposit(ShadeCoinGenerator.eval(current_user, coin));
}

# Returns current market value / authenticity of given ShadeCoin
# VALID_SHADECOIN = 0
# INVALID_SHADECOIN = 1
# UNKNOWN_SHADECOIN = -1
method signed int validate_shade_coin(ShadeCoin coin) {
  return signed int validate(coin);
}

# Character array displaying current ShadeCoin worth.
# For use on LED displays and other compatible hardware.
method char[] display_shade_coins() {
  return char[] display();
}

# Public interface for generating ShadeCoins on the fly.
# Warning! Not thread safe.
# Do not call outside of sleep() cycle.
method ShadeCoin generate_shade_coin() {
  return (ShadeCoin)generate!();
}

# Decrements ShadeCoin holdings
method void spend_shade_coin(Shadecoin coin) {
  spend!(coin);
}

